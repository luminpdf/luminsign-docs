"use strict";(self.webpackChunkluminsign=self.webpackChunkluminsign||[]).push([[3375],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(96540);const o={},r=i.createContext(o);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},28721:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"authorization/oauth2-authentication/public-authorization-code","title":"Public Authentication Code Grant Flow","description":"The Public Authorization Code Grant with PKCE is an OAuth 2.0 flow designed for applications that cannot securely store a client secret. This includes single-page applications (SPAs), mobile apps, and desktop apps.","source":"@site/docs/beta/authorization/oauth2-authentication/public-authorization-code.mdx","sourceDirName":"authorization/oauth2-authentication","slug":"/authorization/oauth2-authentication/public-authorization-code","permalink":"/docs/beta/authorization/oauth2-authentication/public-authorization-code","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Public Authentication Code Grant Flow","sidebar_position":3},"sidebar":"sidebar","previous":{"title":"Private Authentication Code Grant Flow","permalink":"/docs/beta/authorization/oauth2-authentication/private-authorization-code"},"next":{"title":"Scopes","permalink":"/docs/beta/authorization/oauth2-authentication/scopes"}}');var o=t(74848),r=t(28453);const a={title:"Public Authentication Code Grant Flow",sidebar_position:3},s="Public Authentication Code Grant Flow",l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step-by-step walkthrough",id:"step-by-step-walkthrough",level:2},{value:"Step 1: Generate PKCE Code Verifier and Challenge",id:"step-1-generate-pkce-code-verifier-and-challenge",level:3},{value:"Example",id:"example",level:4},{value:"Step 2: Redirect user to Authorization Endpoint",id:"step-2-redirect-user-to-authorization-endpoint",level:3},{value:"Example Request",id:"example-request",level:4},{value:"Step 3: Exchange Authorization Code for Tokens",id:"step-3-exchange-authorization-code-for-tokens",level:3},{value:"Example Request",id:"example-request-1",level:4},{value:"Response",id:"response",level:4},{value:"Step 4: Call Lumin APIs with Bearer Token",id:"step-4-call-lumin-apis-with-bearer-token",level:3},{value:"Example Request",id:"example-request-2",level:4}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"public-authentication-code-grant-flow",children:"Public Authentication Code Grant Flow"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.strong,{children:"Public Authorization Code Grant with PKCE"})," is an OAuth 2.0 flow designed for applications that cannot securely store a client secret. This includes single-page applications (SPAs), mobile apps, and desktop apps."]}),"\n",(0,o.jsxs)(n.p,{children:["Unlike private (confidential) flows, this method uses ",(0,o.jsx)(n.strong,{children:"PKCE (Proof Key for Code Exchange)"})," to ensure security without requiring a client secret. Lumin supports the ",(0,o.jsx)(n.strong,{children:"S256 (SHA-256)"})," method for PKCE."]}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note:"})," The Public (PKCE) flow ",(0,o.jsx)(n.strong,{children:"does not"})," issue refresh tokens. If your application requires long-lived sessions or background processing (e.g., refreshing access without user interaction), create a ",(0,o.jsx)(n.strong,{children:"Private (Server) OAuth 2.0 application"})," instead. Private apps can securely store a client secret and support refresh tokens, while public apps cannot."]})}),"\n",(0,o.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["A Public (PKCE) OAuth 2.0 application has been created in Lumin. See: ",(0,o.jsx)(n.a,{href:"/docs/beta/authorization/oauth2-authentication/creating-oauth2-application/",children:"Creating an OAuth 2.0 Application in Lumin"})]}),"\n",(0,o.jsxs)(n.li,{children:["You have the following values from the Developer settings page:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"Client ID"})}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Redirect URI"})," (must exactly match one of the URIs registered for your app)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"step-by-step-walkthrough",children:"Step-by-step walkthrough"}),"\n",(0,o.jsx)(n.h3,{id:"step-1-generate-pkce-code-verifier-and-challenge",children:"Step 1: Generate PKCE Code Verifier and Challenge"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Create a ",(0,o.jsx)(n.code,{children:"code_verifier"})," as a random string"]}),"\n",(0,o.jsxs)(n.li,{children:["Generate a ",(0,o.jsx)(n.code,{children:"code_challenge"})," by hashing the ",(0,o.jsx)(n.code,{children:"code_verifier"})," using ",(0,o.jsx)(n.strong,{children:"SHA-256"})," and then encoding the result with Base64URL"]}),"\n",(0,o.jsxs)(n.li,{children:["Specify ",(0,o.jsx)(n.code,{children:"code_challenge_method=S256"})]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'code_verifier = "R8zFoqs\xd8yeysd881QITZs3dK1YsdIvFNBf04D1bukBw"\ncode_challenge = "RqN6kvc2f99WD-BQG3SzsDfQcX54BxuyuM40alAt8b5M"\n'})}),"\n",(0,o.jsx)(n.h3,{id:"step-2-redirect-user-to-authorization-endpoint",children:"Step 2: Redirect user to Authorization Endpoint"}),"\n",(0,o.jsx)(n.p,{children:"Redirect the user to Lumin's OAuth 2.0 authorization endpoint."}),"\n",(0,o.jsx)(n.h4,{id:"example-request",children:"Example Request"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"GET https://auth.luminpdf.com/oauth2/auth?\nclient_id=YOUR_CLIENT_ID&\nresponse_type=code&\nredirect_uri=YOUR_REDIRECT_URI&\nscope=openid sign:requests&\nstate=5a7a4c98-40e2-4e2a-a0d5-979fb639b5b5&\ncode_challenge=CODE_CHALLENGE&\ncode_challenge_method=S256\n"})}),"\n",(0,o.jsxs)(n.p,{children:["After the user approves, Lumin redirects them back to your ",(0,o.jsx)(n.code,{children:"redirect_uri"})," with an ",(0,o.jsx)(n.code,{children:"authorization code"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"step-3-exchange-authorization-code-for-tokens",children:"Step 3: Exchange Authorization Code for Tokens"}),"\n",(0,o.jsxs)(n.p,{children:["Exchange the authorization code for an access token. For public apps, ",(0,o.jsx)(n.strong,{children:"no client secret is required"}),"; instead, provide the ",(0,o.jsx)(n.code,{children:"code_verifier"}),"."]}),"\n",(0,o.jsx)(n.h4,{id:"example-request-1",children:"Example Request"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"curl --request POST \\\n--url https://auth.luminpdf.com/oauth2/token \\\n-d 'grant_type=authorization_code' \\\n-d 'code=$YOUR_AUTHORIZATION_CODE' \\\n-d 'client_id=$YOUR_CLIENT_ID' \\\n-d 'redirect_uri=$YOUR_REDIRECT_URI' \\\n-d 'code_verifier=$YOUR_CODE_VERIFIER' \\\n--header 'Content-Type: application/x-www-form-urlencoded'\n"})}),"\n",(0,o.jsx)(n.h4,{id:"response",children:"Response"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "access_token": "ory_at__aqzPqv1z0Uw...",\n  "expires_in": 3598,\n  "token_type": "bearer",\n  "scope": "openid sign:requests"\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"step-4-call-lumin-apis-with-bearer-token",children:"Step 4: Call Lumin APIs with Bearer Token"}),"\n",(0,o.jsxs)(n.p,{children:["Use the access token in the ",(0,o.jsx)(n.code,{children:"Authorization"})," header to call Lumin APIs."]}),"\n",(0,o.jsx)(n.h4,{id:"example-request-2",children:"Example Request"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'curl --request GET \\\n--url https://api.luminpdf.com/v1/signature_request/send \\\n--header "Authorization: Bearer $ACCESS_TOKEN" \\\n--header "Content-Type: application/json"\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);