"use strict";(self.webpackChunkluminsign=self.webpackChunkluminsign||[]).push([[2264],{83904:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>d,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var i=n(74848),r=n(28453);const s={title:"Text Tags",sidebar_position:1},d="Text Tags",o={id:"api/walkthrough/text-tag",title:"Text Tags",description:"Introduction",source:"@site/docs/api/walkthrough/text-tag.mdx",sourceDirName:"api/walkthrough",slug:"/api/walkthrough/text-tag",permalink:"/docs/api/walkthrough/text-tag",draft:!1,unlisted:!1,editUrl:"https://github.com/luminpdf/luminsign-docs/blob/main/docs/api/walkthrough/text-tag.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Text Tags",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Walkthroughs",permalink:"/docs/category/walkthroughs"},next:{title:"Lumin Sign API v1",permalink:"/docs/category/lumin-sign-api-v1"}},a={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Text Tags Walkthrough",id:"text-tags-walkthrough",level:2},{value:"Using Text Tags in API request",id:"using-text-tags-in-api-request",level:3},{value:"Important note",id:"important-note",level:3},{value:"Syntax",id:"syntax",level:3},{value:"Text Tags validation",id:"text-tags-validation",level:3},{value:"Form field properties",id:"form-field-properties",level:3}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"text-tags",children:"Text Tags"}),"\n",(0,i.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(t.p,{children:"In case of a non-embedded signature request, the document sender would not interact with the Lumin Sign iFrame to prepare the document but rather the document will be sent via the API request. Hence, we need another way to add form fields and assign them to the recipients, and that is by using Text Tags."}),"\n",(0,i.jsx)(t.p,{children:"Once enabled, Text Tags will be parsed and converted into form fields - UI components that the recipients of the document can interact with. Guide on how to use Text Tags will be provided in the section below."}),"\n",(0,i.jsx)(t.h2,{id:"text-tags-walkthrough",children:"Text Tags Walkthrough"}),"\n",(0,i.jsx)(t.h3,{id:"using-text-tags-in-api-request",children:"Using Text Tags in API request"}),"\n",(0,i.jsxs)(t.p,{children:["Include ",(0,i.jsx)(t.code,{children:"use_text_tags"})," parameter to your API request and set it to ",(0,i.jsx)(t.code,{children:"true"})," to enable Text Tag parsing in your document. If left out, this parameter is default to ",(0,i.jsx)(t.code,{children:"false"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"important-note",children:"Important note"}),"\n",(0,i.jsx)(t.p,{children:"Text Tags are detected by actual text value, not by doing OCR on images with text. Thus, it is important to note:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"The document must contain actual text for tags."}),"\n",(0,i.jsx)(t.li,{children:"The document must be in PDF format, as form fields might end up in the wrong location with other formats."}),"\n",(0,i.jsx)(t.li,{children:"The tags WILL remain on the document, so we highly recommend setting the tag text color the same as the document background to hide them."}),"\n",(0,i.jsxs)(t.li,{children:["Text Tags cannot contain whitespace. If whitespace is needed for layout purposes, consider using underscores ",(0,i.jsx)(t.code,{children:"(_)"})," instead."]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(t.p,{children:"This is the correct syntax of the Text Tags:"}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"[text|noreq|signer1|Label|UniqueId]"})})}),"\n",(0,i.jsxs)(t.p,{children:["A Text Tag will be wrapped between a pair of square brackets ",(0,i.jsx)(t.code,{children:"[ ]"}),", and contains identifiers divided by a pipe character ",(0,i.jsx)(t.code,{children:"|"}),". Identifiers are parts of the text that determine the field type, the recipient assigned to the field, and the requirement of the field. Details of each identifiers are listed in the table below:"]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Identifier"}),(0,i.jsx)(t.th,{children:"Acceptable value"}),(0,i.jsx)(t.th,{children:"Required"}),(0,i.jsx)(t.th,{children:"Description"}),(0,i.jsx)(t.th,{children:"Remark"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Types of field"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"sig"})," (for signature field) ",(0,i.jsx)("br",{})," ",(0,i.jsx)(t.code,{children:"initial"})," (for initial field) ",(0,i.jsx)("br",{})," ",(0,i.jsx)(t.code,{children:"text"})," (for text field) ",(0,i.jsx)("br",{})," ",(0,i.jsx)(t.code,{children:"date"})," (for date field)"]}),(0,i.jsx)(t.td,{children:"Yes (must not be blank)"}),(0,i.jsx)(t.td,{children:"Define the type of form field"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Types of requirement"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"req"})," (for required) ",(0,i.jsx)("br",{})," ",(0,i.jsx)(t.code,{children:"noreq"})," (for optional)"]}),(0,i.jsx)(t.td,{children:"Yes (must not be blank)"}),(0,i.jsx)(t.td,{children:"Define if this form field is required or optional."}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Assigner"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"signerN"})," (N = 1, 2, 3, etc.)"]}),(0,i.jsx)(t.td,{children:"Yes (must not be blank)"}),(0,i.jsx)(t.td,{children:"Match the index of the signers in the API request"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Label"}),(0,i.jsx)(t.td,{children:"Free text"}),(0,i.jsx)(t.td,{children:"No"}),(0,i.jsx)(t.td,{children:"Acting as placeholder for the field"}),(0,i.jsx)(t.td,{children:"This is currently overridden by the default placeholders of the form fields in Lumin Sign"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Unique ID"}),(0,i.jsx)(t.td,{children:"Free text"}),(0,i.jsx)(t.td,{children:"No"}),(0,i.jsx)(t.td,{children:"Acting as field name, where the 3rd party can assign a unique ID to the field"}),(0,i.jsx)(t.td,{})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"text-tags-validation",children:"Text Tags validation"}),"\n",(0,i.jsx)(t.p,{children:"Text Tags are detected by parsing the documents for any text that meets the syntax requirement presented in the section above. A tag that is missing any of the required identifiers will NOT be considered a Text Tag, thus you would not receive any errors as these tags are not converted into form fields."}),"\n",(0,i.jsxs)(t.p,{children:["In case of an invalid Text Tag i.e. wrong requirement type or unidentified signer, you would not receive an immediate error in the API response. Instead, the error will come back later in the webhook event ",(0,i.jsx)(t.code,{children:"signature_request_invalid"}),". You can read more about our events in the ",(0,i.jsx)(t.a,{href:"/docs/api/events/",children:"Events and Callbacks"})," section."]}),"\n",(0,i.jsx)(t.h3,{id:"form-field-properties",children:"Form field properties"}),"\n",(0,i.jsx)(t.p,{children:"The size of the form fields created will be defined as follows:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"The height of the form fields will be fixed to accommodate a font size of 12."}),"\n",(0,i.jsxs)(t.li,{children:["The width of the form fields will be equal to the length of the tag (between the pair of square brackets). To make a field longer, add extra underscores ",(0,i.jsx)(t.code,{children:"(_)"})," after the last identifier of the tag."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Example: ",(0,i.jsx)(t.code,{children:"[sig1|noreq|signer1____]"})," will render a wider field than ",(0,i.jsx)(t.code,{children:"[sig1|noreq|signer1]"}),"."]})]})}function c(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>o});var i=n(96540);const r={},s=i.createContext(r);function d(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);