components:
  schemas:
    # Private Authorization Code Flow (for confidential clients)
    PrivateAuthorizationCode:
      type: object
      required:
        - response_type
        - client_id
        - redirect_uri
        - scope
      properties:
        response_type:
          type: string
          description: Must be `code`.
          enum:
            - code
        client_id:
          type: string
          description: Your app's Client ID from Lumin.
        redirect_uri:
          type: string
          format: uri
          description: Must exactly match one of the redirect URIs registered in your app.
        scope:
          type: string
          description: |
            Space-delimited list of scopes (e.g., `openid sign:requests.write`).
            See: [OAuth 2.0 Scopes in Lumin](/docs/beta/authorization/oauth2-authentication/scopes).
        state:
          type: string
          description: Unique string to protect against CSRF attacks. Return it unchanged to validate the response.
        nonce:
          type: string
          description: This value is required if use request for id_token scope. Value for prevent playback attack, you must compare with nonce in id_token if set
      xml:
        name: PrivateAuthorizationCode
    
    # Public Authorization Code Flow with PKCE (for public clients)
    PublicAuthorizationCode:
      type: object
      required:
        - response_type
        - client_id
        - redirect_uri
        - scope
        - code_challenge
        - code_challenge_method
      properties:
        response_type:
          type: string
          description: Must be `code`.
          enum:
            - code
        client_id:
          type: string
          description: Your app's Client ID from Lumin.
        redirect_uri:
          type: string
          format: uri
          description: Must exactly match one of the redirect URIs registered in your app.
        scope:
          type: string
          description: |
            Space-delimited list of scopes (e.g., `openid sign:requests.write`).
            See: [OAuth 2.0 Scopes in Lumin](/docs/beta/authorization/oauth2-authentication/scopes).
        state:
          type: string
          description: Unique string to protect against CSRF attacks. Return it unchanged to validate the response.
        code_challenge:
          type: string
          description: PKCE code challenge derived from the `code_verifier`.
        code_challenge_method:
          type: string
          description: Must be `S256` (SHA-256).
          enum:
            - S256
      xml:
        name: PublicAuthorizationCode
